{"version":3,"sources":["TestData/MockGoogleFontResponse.js","Mapper/index.js","Containers/Actions/index.js","Components/ColorPicker/index.js","Components/FontOptionContainer/index.js","Components/CopyContent/index.js","Components/TabContainer/index.js","Helper/index.js","Components/TextBox/index.js","Components/TextBoxContainer/index.js","Components/Loader/index.js","Components/Header/index.js","Components/App/index.js","Containers/Reducers/GFontsReducer.js","Containers/Reducers/index.js","registerServiceWorker.js","index.js"],"names":["googleFontResponse","kind","items","family","category","variants","subsets","version","lastModified","files","regular","italic","500","600","700","800","__getMappedVariants","arr","identitiy","_sortBy","item","toLowerCase","__sortArray","map","obj","value","label","__getMappedValueLabelObj","fetchData","dispatch","fontsObject","propertiesToBeDeleted","categoryArray","fetch","then","res","json","fonts","forEach","font","d","push","categories","_uniq","catch","fetchGoolgeFonts","type","payload","availableCategories","val","name","isActive","availableFontFamilies","categoryChange","selectedCategory","userSelectedTextBox","changeFontFamily","fontFamily","availableFontVariants","filter","x","changeFontVariant","fontVariant","changeTextBox","activeTextBox","changeTextColor","color","rgb","changeBgColor","changeFontSize","fontSize","changeLineHeight","lineHeight","addTextBox","removeTextBox","ColorPicker","props","state","displayColorPicker","handleOnClick","bind","handleOnChange","nextProps","this","setState","isBackgroundColorPicker","document","body","style","backgroundColor","r","g","b","a","handleChangeBgColor","handleChangeColor","colorObject","backGroundObject","className","onClick","__getStyleObject","onChange","Component","enhanceWithClickOutside","FontOptionContainer","bgColor","isFontVariantDisabled","handleClickOnCategory","handleChangeFontFamily","handleChangeFontSize","handleChangeLineHeight","handleChangeFontVariant","event","categoryName","target","dataset","selectedFontFamily","textBoxOption","setTimeout","fontToBeLoader","_map","toString","WebFont","load","google","families","selectedFontVariant","index","key","data-category","options","clearable","placeholder","disabled","backspaceRemoves","min","max","connect","GFontsReducer","GFontsAction","CopyContent","handleClick","handleClickMouseLeave","titleText","onMouseLeave","data-item","content","TabContainer","handleClickOnCopy","textField","createElement","innerText","appendChild","select","execCommand","remove","fontName","replace","rel","href","getFontWeightAndSyle","fontWeight","fontStyle","indexOf","substring","TextBox","isHowToUseTabVisible","handleClickOnHowToUse","handleClickOnCompareBtn","handleClickOnRemoveBtn","e","stopPropagation","oldState","dataItem","textAreaStyle","autoFocus","aria-hidden","length","TextBoxContainer","textBoxes","Loader","Header","title","App","isHideControl","handleClickOnControlBtn","initialState","showLoader","combineReducers","action","newState","_cloneDeep","element","splice","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","logger","createLogger","preloadedState","__PRELOADED_STATE__","butiltWithReact","welcomeMessage","store","compose","applyMiddleware","thunk","createStore","Reducers","ReactDOM","render","getElementById","URL","process","origin","addEventListener","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b76cb0cf.chunk.js","sourcesContent":["export const googleFontResponse = {\n    kind: \"webfonts#webfontList\",\n    items: [\n        {\n            kind: \"webfonts#webfont\",\n            family: \"ABeeZee\",\n            category: \"sans-serif\",\n            variants: [\n                \"regular\",\n                \"italic\"\n            ],\n            subsets: [\n                \"latin\"\n            ],\n            version: \"v11\",\n            lastModified: \"2017-10-10\",\n            files: {\n                regular: \"http://fonts.gstatic.com/s/abeezee/v11/mE5BOuZKGln_Ex0uYKpIaw.ttf\",\n                italic: \"http://fonts.gstatic.com/s/abeezee/v11/kpplLynmYgP0YtlJA3atRw.ttf\"\n            }\n        },\n        {\n            kind: \"webfonts#webfont\",\n            family: \"Abel\",\n            category: \"sans-serif\",\n            variants: [\n                \"regular\"\n            ],\n            subsets: [\n                \"latin\"\n            ],\n            version: \"v8\",\n            lastModified: \"2017-10-10\",\n            files: {\n                regular: \"http://fonts.gstatic.com/s/abel/v8/RpUKfqNxoyNe_ka23bzQ2A.ttf\"\n            }\n        },\n        {\n            kind: \"webfonts#webfont\",\n            family: \"Abhaya Libre\",\n            category: \"serif\",\n            variants: [\n                \"regular\",\n                \"500\",\n                \"600\",\n                \"700\",\n                \"800\"\n            ],\n            subsets: [\n                \"latin\",\n                \"latin-ext\",\n                \"sinhala\"\n            ],\n            version: \"v3\",\n            lastModified: \"2017-10-10\",\n            files: {\n                500: \"http://fonts.gstatic.com/s/abhayalibre/v3/wBjdF6T34NCo7wQYXgzrc5MQuUSAwdHsY8ov_6tk1oA.ttf\",\n                600: \"http://fonts.gstatic.com/s/abhayalibre/v3/wBjdF6T34NCo7wQYXgzrc2v8CylhIUtwUiYO7Z2wXbE.ttf\",\n                700: \"http://fonts.gstatic.com/s/abhayalibre/v3/wBjdF6T34NCo7wQYXgzrc0D2ttfZwueP-QU272T9-k4.ttf\",\n                800: \"http://fonts.gstatic.com/s/abhayalibre/v3/wBjdF6T34NCo7wQYXgzrc_qsay_1ZmRGmC8pVRdIfAg.ttf\",\n                regular: \"http://fonts.gstatic.com/s/abhayalibre/v3/zTLc5Jxv6yvb1nHyqBasVy3USBnSvpkopQaUR-2r7iU.ttf\"\n            }\n        },\n        {\n            kind: \"webfonts#webfont\",\n            family: \"Abril Fatface\",\n            category: \"display\",\n            variants: [\n                \"regular\"\n            ],\n            subsets: [\n                \"latin\",\n                \"latin-ext\"\n            ],\n            version: \"v9\",\n            lastModified: \"2017-10-10\",\n            files: {\n                regular: \"http://fonts.gstatic.com/s/abrilfatface/v9/X1g_KwGeBV3ajZIXQ9VnDojjx0o0jr6fNXxPgYh_a8Q.ttf\"\n            }\n        },\n        {\n            kind: \"webfonts#webfont\",\n            family: \"Aclonica\",\n            category: \"sans-serif\",\n            variants: [\n                \"regular\"\n            ],\n            subsets: [\n                \"latin\"\n            ],\n            version: \"v8\",\n            lastModified: \"2017-10-10\",\n            files: {\n                regular: \"http://fonts.gstatic.com/s/aclonica/v8/M6pHZMPwK3DiBSlo3jwAKQ.ttf\"\n            }\n        },\n        {\n            kind: \"webfonts#webfont\",\n            family: \"Acme\",\n            category: \"sans-serif\",\n            variants: [\n                \"regular\"\n            ],\n            subsets: [\n                \"latin\"\n            ],\n            version: \"v7\",\n            lastModified: \"2017-10-10\",\n            files: {\n                regular: \"http://fonts.gstatic.com/s/acme/v7/-J6XNtAHPZBEbsifCdBt-g.ttf\"\n            }\n        },\n        {\n            kind: \"webfonts#webfont\",\n            family: \"Actor\",\n            category: \"sans-serif\",\n            variants: [\n                \"regular\"\n            ],\n            subsets: [\n                \"latin\"\n            ],\n            version: \"v7\",\n            lastModified: \"2017-10-10\",\n            files: {\n                regular: \"http://fonts.gstatic.com/s/actor/v7/ugMf40CrRK6Jf6Yz_xNSmQ.ttf\"\n            }\n        },\n        {\n            kind: \"webfonts#webfont\",\n            family: \"Adamina\",\n            category: \"serif\",\n            variants: [\n                \"regular\"\n            ],\n            subsets: [\n                \"latin\"\n            ],\n            version: \"v10\",\n            lastModified: \"2017-10-10\",\n            files: {\n                regular: \"http://fonts.gstatic.com/s/adamina/v10/RUQfOodOMiVVYqFZcSlT9w.ttf\"\n            }\n        }]\n}","import _uniq from 'lodash/uniq';\nimport _sortBy from 'lodash/sortBy';\nimport { googleFontResponse } from './../TestData/MockGoogleFontResponse';\nconst URL = 'https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyDUYZ9Phtnc_OpfFd39Ri-eQoxbfvcwUeA';\n\n\nlet __sortArray = (arr, identitiy) =>  _sortBy(arr, (item)=> item.toLowerCase() === identitiy ? 0 : 1 );\n\nlet __getMappedVariants = (arr) => {\n    let sortedArr = __sortArray(arr, 'regular');\n    return sortedArr.map((obj)=>{\n        return {\n            value: obj,\n            label: obj,\n        }\n    })\n}\n\nlet __getMappedValueLabelObj = (obj) => {\n    return {\n        value: obj.family,\n        label: obj.family,\n        variants: __getMappedVariants(obj.variants)\n    }\n}\n\nlet fetchGoolgeFonts = () => {\n    let fontsObject = { \"All\": [] };\n    let propertiesToBeDeleted = [\"kind\", \"subsets\", \"version\", \"lastModified\", \"files\"];\n    let category = \"\";\n    let categoryArray = [\"All\"];\n    return fetch(URL)\n        .then((res) => {\n            return res.json()\n        })\n        .then((fonts) => {\n            fonts.items.forEach((font) => {\n                propertiesToBeDeleted.map((d) => delete font[d]);\n                category = font.category;\n                categoryArray.push(category)\n                fontsObject[\"All\"].push(__getMappedValueLabelObj(font));\n                fontsObject[category] ? fontsObject[category].push(__getMappedValueLabelObj(font)) : fontsObject[category] = [__getMappedValueLabelObj(font)]\n            });\n\n            return (\n                {\n                    fonts: fontsObject,\n                    categories: _uniq(categoryArray)\n                }\n            )\n        })\n        .catch(()=>{\n            // need to be removed\n\n            let fonts = googleFontResponse;\n            fonts.items.forEach((font) => {\n                propertiesToBeDeleted.map((d) => delete font[d]);\n                category = font.category;\n                categoryArray.push(category)\n                fontsObject[\"All\"].push(__getMappedValueLabelObj(font));\n                fontsObject[category] ? fontsObject[category].push(__getMappedValueLabelObj(font)) : fontsObject[category] = [__getMappedValueLabelObj(font)]\n            });\n\n            return (\n                {\n                    fonts: fontsObject,\n                    categories: _uniq(categoryArray)\n                }\n            )\n        })\n}\n\nlet mappedCategoryArray = (arr) => {\n    return arr.map((val) => {\n        return ({\n            name: val,\n            isActive: val === \"All\" ? true : false\n        })\n    });\n};\n\nexport { fetchGoolgeFonts, mappedCategoryArray }\n","\nimport { fetchGoolgeFonts, mappedCategoryArray } from './../../Mapper';\n// import _cloneDeep from 'lodash/cloneDeep';\n\nexport default {\n    fetchData: (dispatch) => {\n        return dispatch => {\n            return fetchGoolgeFonts().then((res) => {\n                dispatch({\n                    type: \"FETCHED_FONTS\",\n                    payload: {\n                        fonts: res.fonts,\n                        availableCategories: mappedCategoryArray(res.categories),\n                        availableFontFamilies: res.fonts[\"All\"]\n                    }\n                });\n            });\n        }\n    },\n\n    categoryChange: (dispatch, fonts, selectedCategory, userSelectedTextBox) => {\n        return dispatch => {\n            dispatch({\n                type: \"CATEGORY_CHANGED\",\n                payload: {\n                    userSelectedTextBox: userSelectedTextBox,\n                    selectedCategory: selectedCategory,\n                    availableFontFamilies: fonts[selectedCategory],\n                }\n            });\n        }\n    },\n\n    changeFontFamily: (dispatch, fontFamily, userSelectedTextBox, availableFontFamilies) =>{\n        return dispatch => {\n            dispatch({\n                type: \"FONTFAMLIY_CHANGED\",\n                payload: {\n                    fontFamily: fontFamily.value,\n                    userSelectedTextBox: userSelectedTextBox,\n                    availableFontVariants: availableFontFamilies.filter(x => x.value === fontFamily.value)[0].variants\n                }\n            });\n        }\n    },\n\n    changeFontVariant: (dispatch, fontVariant, userSelectedTextBox) => {\n        return dispatch => {\n            dispatch({\n                type: \"FONTVARIANT_CHANGED\",\n                payload: {\n                    fontVariant: fontVariant.value,\n                    userSelectedTextBox: userSelectedTextBox\n                }\n            });\n        }\n    },\n\n    changeTextBox: (dispatch, activeTextBox) => {\n        return dispatch => {\n            dispatch({\n                type: \"TEXTBOX_CHANGED\",\n                payload: {\n                    userSelectedTextBox: activeTextBox,\n                }\n            });\n        }\n    },\n\n    changeTextColor: (dispatch, color, userSelectedTextBox) => {\n        return dispatch => {\n            dispatch({\n                type: \"TEXTCOLOR_CHANGED\",\n                payload: {\n                    color: color.rgb,\n                    userSelectedTextBox: userSelectedTextBox,\n                }\n            });\n        }\n    },\n\n    changeBgColor: (dispatch, color) => {\n        return dispatch => {\n            dispatch({\n                type: \"BGCOLOR_CHANGED\",\n                payload: {\n                    color: color.rgb,\n                }\n            });\n        }\n    },\n\n    changeFontSize: (dispatch, fontSize, userSelectedTextBox) => {\n        return dispatch => {\n            dispatch({\n                type: \"FONTSIZE_CHANGED\",\n                payload: {\n                    fontSize: fontSize,\n                    userSelectedTextBox: userSelectedTextBox,\n                }\n            });\n        }\n    },\n    \n    changeLineHeight: (dispatch, lineHeight, userSelectedTextBox) => {\n        return dispatch => {\n            dispatch({\n                type: \"LINEHEIGHT_CHANGED\",\n                payload: {\n                    lineHeight: lineHeight,\n                    userSelectedTextBox: userSelectedTextBox,\n                }\n            });\n        }\n    },\n\n    addTextBox: (dispatch, userSelectedTextBox) =>{\n        return dispatch => {\n            dispatch({\n                type: \"NEWTEXTBOX_ADDED\",\n                payload: {\n                    userSelectedTextBox: userSelectedTextBox,\n                }\n            });\n        }\n    },\n\n    removeTextBox: (dispatch, userSelectedTextBox) =>{\n        return dispatch => {\n            dispatch({\n                type: \"TEXTBOX_REMOVED\",\n                payload: {\n                    userSelectedTextBox: userSelectedTextBox,\n                }\n            });\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { SketchPicker } from 'react-color';\nimport enhanceWithClickOutside from 'react-click-outside';\nimport './ColorPicker.scss';\n\nclass ColorPicker extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            color: this.props.color,\n            displayColorPicker: false,\n        }\n        this.handleOnClick = this.handleOnClick.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ color: nextProps.color })\n    }\n\n    handleOnClick() {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n    }\n\n    handleOnChange(color) {\n        this.setState({ color: color.rgb }, () => {\n            if (this.props.isBackgroundColorPicker) {\n                document.body.style.backgroundColor = `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`;\n                this.props.handleChangeBgColor(color);\n            }\n\n            else {\n                this.props.handleChangeColor(color)\n            }\n        })\n    }\n\n    handleClickOutside() {\n        this.setState({ displayColorPicker: false })\n    }\n\n    __getStyleObject(isBackgroundColorPicker) {\n        const colorObject = {\n            color: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`,\n        };\n\n        const backGroundObject = {\n            backgroundColor: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`,\n        };\n\n        return isBackgroundColorPicker ? backGroundObject : colorObject\n\n    }\n\n    render() {\n        return (\n            <div className=\"ColorPicker\">\n                <div className={`${this.state.displayColorPicker ? \"is-focused \" : \"\"}ColorPicker__Swatch`} onClick={this.handleOnClick}>\n                    <div className=\"ColorPicker__Color\" style={this.__getStyleObject(this.props.isBackgroundColorPicker)}>\n                        {!this.props.isBackgroundColorPicker && \"A\"}\n                    </div>\n                </div>\n                {this.state.displayColorPicker ?\n                    <div className=\"ColorPicker__Popover\">\n                        <SketchPicker color={this.state.color} onChange={this.handleOnChange} />\n                    </div> :\n                    null}\n\n            </div>\n        );\n    }\n}\n\nColorPicker.propTypes = {\n    isBackgroundColorPicker: PropTypes.bool,\n    handleChangeColor: PropTypes.func,\n    handleChangeBgColor: PropTypes.func\n};\n\nexport default enhanceWithClickOutside(ColorPicker);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport _map from 'lodash/map';\nimport 'react-select/dist/react-select.css'\n\nimport GFontsAction from './../../Containers/Actions';\n\nimport WebFont from 'webfontloader';\nimport ColorPicker from './../ColorPicker'\nimport './FontOptionContainer.scss'\n\nexport class FontOptionContainer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            bgColor: this.props.bgColor,\n            isFontVariantDisabled: true,\n        }\n        this.handleClickOnCategory = this.handleClickOnCategory.bind(this);\n        this.handleChangeFontFamily = this.handleChangeFontFamily.bind(this);\n        this.handleChangeColor = this.handleChangeColor.bind(this);\n        this.handleChangeBgColor = this.handleChangeBgColor.bind(this);\n        this.handleChangeFontSize = this.handleChangeFontSize.bind(this);\n        this.handleChangeLineHeight = this.handleChangeLineHeight.bind(this);\n        this.handleChangeFontVariant = this.handleChangeFontVariant.bind(this);\n    }\n\n    handleClickOnCategory(event) {\n        this.setState({isFontVariantDisabled : true})\n        let categoryName = event.target.dataset.category;\n        this.props.categoryChange(this.props.fonts, categoryName, this.props.userSelectedTextBox)\n    }\n\n    handleChangeFontFamily(selectedFontFamily) {\n        let activeTextBox = this.props.textBoxOption[this.props.userSelectedTextBox];\n        this.setState({isFontVariantDisabled : false})\n        this.props.changeFontFamily(selectedFontFamily, this.props.userSelectedTextBox, activeTextBox.availableFontFamilies)\n        setTimeout(() => {\n            let fontToBeLoader = `${selectedFontFamily.value}:${_map(this.props.textBoxOption[this.props.userSelectedTextBox].availableFontVariants, \"label\").toString()}`\n            selectedFontFamily && WebFont.load({\n                google: {\n                    families: [fontToBeLoader]\n                }\n            });\n        }, 0);\n    }\n\n    handleChangeColor(color) {\n        this.props.changeTextColor(color, this.props.userSelectedTextBox)\n    }\n\n    handleChangeBgColor(color) {\n        this.props.changeBgColor(color)\n    }\n\n    handleChangeFontSize(event) {\n        this.props.changeFontSize(event.target.value, this.props.userSelectedTextBox)\n    }\n\n    handleChangeLineHeight(event) {\n        this.props.changeLineHeight(event.target.value, this.props.userSelectedTextBox)\n    }\n\n    handleChangeFontVariant(selectedFontVariant) {\n        this.props.changeFontVariant(selectedFontVariant, this.props.userSelectedTextBox)\n    }\n\n\n    render() {\n        let activeTextBox =  this.props.textBoxOption[this.props.userSelectedTextBox];\n        return (\n            <section className=\"FontOptionContainer\">\n                <section className=\"FontOptionContainer__Item\">\n                    <h4 className=\"FontOptionContainer__Title\">Classification</h4>\n                    <ul>\n                        {this.props.availableCategories.map((category, index) =>\n                            <li key={`${category.name}-${index}`}\n                                data-category={category.name}\n                                className={`${category.name === activeTextBox.category ? \"active\" : \"inactive\"}`}\n                                onClick={this.handleClickOnCategory}>\n                                {category.name}\n                            </li>)\n                        }\n                    </ul>\n                </section>\n                <section className=\"FontOptionContainer__Item\">\n                    <h4 className=\"FontOptionContainer__Title\">Propeties</h4>\n                    <div className=\"FontOptionContainer__Properties\">\n                        <Select\n                            name=\"FontFamilySelectBox\"\n                            value={activeTextBox.fontFamily}\n                            onChange={this.handleChangeFontFamily}\n                            options={activeTextBox.availableFontFamilies}\n                            clearable={true}\n                            placeholder=\"Select Font Family\"\n                        />\n\n                        <Select\n                            name=\"FontVariantSelectBox\"\n                            value={activeTextBox.fontVariant}\n                            onChange={this.handleChangeFontVariant}\n                            options={activeTextBox.availableFontVariants}\n                            clearable={false}\n                            disabled={this.state.isFontVariantDisabled}\n                            backspaceRemoves={false}\n                            placeholder=\"Select Font Variants\"\n                        />\n\n                        <div className=\"OtherProperties\">\n                            <div className=\"FontSize__Option OtherProperties__Option\">\n                                <label>Font size</label>\n                                <input type=\"number\"\n                                    name=\"quantity\"\n                                    min=\"9\"\n                                    max=\"248\"\n                                    onChange={this.handleChangeFontSize}\n                                    value={activeTextBox.fontSize}\n                                />\n                            </div>\n                            <div className=\"LineHeight__Option OtherProperties__Option\">\n                                <label>Line height</label>\n                                <input type=\"number\"\n                                    name=\"lineHeight\"\n                                    min=\"0\"\n                                    onChange={this.handleChangeLineHeight}\n                                    value={activeTextBox.lineHeight}\n                                />\n                            </div>\n                            <div className=\"ColorOption__ForeGround OtherProperties__Option\">\n                                <label>Text Color</label>\n                                <ColorPicker\n                                    color={activeTextBox.color}\n                                    handleChangeColor={this.handleChangeColor}\n                                />\n                            </div>\n                            <div className=\"ColorOption__BackGround OtherProperties__Option\">\n                                <label>Background Color</label>\n                                <ColorPicker color={this.props.bgColor}\n                                    handleChangeBgColor={this.handleChangeBgColor}\n                                    isBackgroundColorPicker\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </section >\n        );\n    }\n}\nFontOptionContainer.propTypes = {\n    availableCategories: PropTypes.array,\n    categoryChange: PropTypes.func,\n    changeFontFamily: PropTypes.func,\n    changeFontSize: PropTypes.func,\n    changeLineHeight: PropTypes.func,\n    changeFontVariant: PropTypes.func,\n    changeTextColor: PropTypes.func,\n    changeBgColor: PropTypes.func,\n    fonts: PropTypes.object,\n    textBoxOption: PropTypes.array,\n    userSelectedTextBox: PropTypes.number\n};\n\n\nfunction mapStateToProps(state) {\n    return {\n        userSelectedTextBox: state.GFontsReducer.userSelectedTextBox,\n        textBoxOption: state.GFontsReducer.textBoxOption,\n        fonts: state.GFontsReducer.fonts,\n        availableCategories: state.GFontsReducer.availableCategories,\n        bgColor: state.GFontsReducer.bgColor,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        categoryChange: (fonts, selectedCategory, userSelectedTextBox) => {\n            dispatch(GFontsAction.categoryChange(dispatch, fonts, selectedCategory, userSelectedTextBox))\n        },\n        changeFontFamily: (fontFamily, userSelectedTextBox, availableFontFamilies) => {\n            dispatch(GFontsAction.changeFontFamily(dispatch, fontFamily, userSelectedTextBox, availableFontFamilies))\n        },\n        changeFontVariant: (fontVariant, userSelectedTextBox) => {\n            dispatch(GFontsAction.changeFontVariant(dispatch, fontVariant, userSelectedTextBox))\n        },\n        changeTextColor: (color, userSelectedTextBox) => {\n            dispatch(GFontsAction.changeTextColor(dispatch, color, userSelectedTextBox))\n        },\n        changeBgColor: (color, userSelectedTextBox) => {\n            dispatch(GFontsAction.changeBgColor(dispatch, color))\n        },\n        changeFontSize: (fontSize, userSelectedTextBox) => {\n            dispatch(GFontsAction.changeFontSize(dispatch, fontSize, userSelectedTextBox))\n        },\n        changeLineHeight: (lineHeight, userSelectedTextBox) => {\n            dispatch(GFontsAction.changeLineHeight(dispatch, lineHeight, userSelectedTextBox))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FontOptionContainer)\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CopyContent.scss'\n\nclass CopyContent extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClickMouseLeave = this.handleClickMouseLeave.bind(this);\n        this.state = {\n            titleText : \"Click to Copy\"\n        }\n    }\n\n    handleClick(event) {\n        this.props.onClick(event.target.dataset.item);\n        this.setState({\n            titleText: \"Copied\"\n        });\n    }\n\n    handleClickMouseLeave() {\n        this.setState({\n            titleText: \"Click to Copy\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"CopyContent\">\n                <i className=\"fa fa-copy\"\n                    onClick={this.handleClick}\n                    onMouseLeave={this.handleClickMouseLeave}\n                    data-item={this.props.content}>\n                </i>\n                <span className=\"CopyContent__TitlePopUp\">{this.state.titleText}</span>\n            </div>\n        );\n    }\n}\n\nCopyContent.propTypes = {\n    content: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default CopyContent;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport CopyContent from './../CopyContent';\nimport './TabContainer.scss';\n\nclass TabContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClickOnCopy = this.handleClickOnCopy.bind(this);\n    }\n\n    handleClickOnCopy(value) {\n        let textField = document.createElement('textarea');\n        textField.innerText = value;\n        document.body.appendChild(textField)\n        textField.select()\n        document.execCommand('copy')\n        textField.remove()\n    }\n\n    render() {\n        return (\n            <div className=\"TabContainer\">\n                <Tabs>\n                    <TabList>\n                        <Tab>Standard</Tab>\n                        <Tab>@Import</Tab>\n                    </TabList>\n\n                    <TabPanel>\n                        <div className=\"TabContainer__Tab--Content\">\n                            <h4>Embed Font</h4>\n                            To embed your selected fonts into a webpage, copy this code into the &lt;head&gt; of your HTML document.\n\n                            <div className=\"Info-Font\">\n                                <span>\n                                    &lt;link href=\"https://fonts.googleapis.com/css?family=<span className=\"Text__bold\">{this.props.fontName.replace(/\\s/g, \"+\")}</span>\" rel=\"stylesheet\"&gt;\n                                </span>\n                                <CopyContent\n                                    onClick={this.handleClickOnCopy}\n                                    content={`<link href=\"https://fonts.googleapis.com/css?family=${this.props.fontName}\" rel=\"stylesheet\">`}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"TabContainer__Tab--Content\">\n                            <h4>Specify in CSS</h4>\n                            Use the following CSS rules to specify these families:\n                            <div className=\"Info-Font\">\n                                <span>\n                                    font-family: {`${this.props.fontName}, sans-serif`};\n                                </span>\n                                <CopyContent\n                                    onClick={this.handleClickOnCopy}\n                                    content={`font-family: ${this.props.fontName}, sans-serif;`}\n                                />\n                            </div>\n                            <strong>Goolgle Fonts:</strong>\n                            <a className=\"Link\" rel=\"noopener noreferrer\" href={`https://fonts.google.com/specimen/${this.props.fontName.replace(/\\s/g, \"+\")}`} target=\"_blank\">\n                                https://fonts.google.com/specimen/{this.props.fontName.replace(/\\s/g, \"+\")}\n                            </a>\n                        </div>\n\n                    </TabPanel>\n                    <TabPanel>\n                        <div className=\"TabContainer__Tab--Content\">\n                            <h4>Embed Font</h4>\n                            To embed your selected fonts into a webpage, copy this code into the &lt;head&gt; of your HTML document.\n\n                            <div className=\"Info-Font\">\n                                <span>\n                                    &lt;style&gt;<br />\n                                    @import url('https://fonts.googleapis.com/css?family=<span className=\"Text__bold\">{this.props.fontName.replace(/\\s/g, \"+\")}</span>');<br />\n                                    &lt;/style&gt;\n                                </span>\n                                <CopyContent\n                                    onClick={this.handleClickOnCopy}\n                                    content={`<style>@import url('https://fonts.googleapis.com/css?family=${this.props.fontName}\");</style>`}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"TabContainer__Tab--Content\">\n                            <h4>Specify in CSS</h4>\n                            Use the following CSS rules to specify these families:\n                            <div className=\"Info-Font\">\n                                <span>\n                                    font-family: {`${this.props.fontName}, sans-serif`};\n                                </span>\n                                <CopyContent\n                                    onClick={this.handleClickOnCopy}\n                                    content={`font-family: ${this.props.fontName}, sans-serif;`}\n                                />\n                            </div>\n                            <strong>Goolgle Fonts:</strong>\n                            <a className=\"Link\" rel=\"noopener noreferrer\" href={`https://fonts.google.com/specimen/${this.props.fontName.replace(/\\s/g, \"+\")}`} target=\"_blank\">\n                                https://fonts.google.com/specimen/{this.props.fontName.replace(/\\s/g, \"+\")}\n                            </a>\n                        </div>\n                    </TabPanel>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nTabContainer.propTypes = {\n  fontName: PropTypes.string\n};\n\nexport default TabContainer;\n","let getFontWeightAndSyle = (x) => {\n    let value = x.toLowerCase();\n    if (value === \"italic\") {\n        return {\n            fontWeight: 400,\n            fontStyle: \"italic\",\n        }\n    } else if (value === \"regular\") {\n        return {\n            fontWeight: 400,\n            fontStyle: \"normal\",\n        }\n    } else if (value.indexOf(\"italic\") > 0) {\n        return {\n            fontWeight: value.substring(0, value.indexOf(\"italic\")),\n            fontStyle: \"italic\",\n        }\n\n    } else {\n        return {\n            fontWeight: value,\n            fontStyle: \"normal\",\n        }\n    }\n}\n\nexport { getFontWeightAndSyle }","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport enhanceWithClickOutside from \"react-click-outside\";\nimport GFontsAction from \"./../../Containers/Actions\";\nimport TabContainer from \"./../TabContainer\";\nimport { getFontWeightAndSyle } from \"./../../Helper\";\nimport \"./TextBox.scss\";\n\nexport class TextBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isHowToUseTabVisible: false\n    };\n    this.handleClickOnHowToUse = this.handleClickOnHowToUse.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickOnCompareBtn = this.handleClickOnCompareBtn.bind(this);\n    this.handleClickOnRemoveBtn = this.handleClickOnRemoveBtn.bind(this);\n  }\n\n  handleClickOnCompareBtn(e) {\n    e.stopPropagation();\n    this.props.addTextBox(this.props.userSelectedTextBox);\n  }\n\n  handleClickOnRemoveBtn(e) {\n    e.stopPropagation();\n    this.props.removeTextBox(this.props.userSelectedTextBox);\n  }\n\n  handleClickOnHowToUse() {\n    let oldState = this.state.isHowToUseTabVisible;\n    this.setState({ isHowToUseTabVisible: !oldState });\n  }\n\n  handleClickOutside() {\n    this.setState({ isHowToUseTabVisible: false });\n  }\n\n  handleClick() {\n    this.props.changeTextBox(this.props.dataItem);\n  }\n\n  render() {\n    const textAreaStyle = {\n      fontFamily: `'${this.props.fontFamily || \"Oswald\"}', sans-serif`,\n      fontSize: `${this.props.fontSize}px`,\n      lineHeight: `${this.props.lineHeight}px`,\n      fontWeight: getFontWeightAndSyle(this.props.fontVariant).fontWeight,\n      fontStyle: getFontWeightAndSyle(this.props.fontVariant).fontStyle,\n      color: `rgba(${this.props.color.r}, ${this.props.color.g}, ${this.props.color.b}, ${this.props.color.a})`\n    };\n    return (\n      <div\n        className={`${this.props.isActive && \"isActive\"} TextBox`}\n        onClick={this.handleClick}\n      >\n        <div className=\"TextBox__TextArea\">\n          <ul className=\"Texbx__FontDetails\">\n            <li className=\"FontsDetails__Item FontsDetails__Item--FontFamily\">\n              {this.props.fontFamily || \"Oswald\"}\n            </li>\n            <li className=\"FontsDetails__Item FontsDetails__Item--FontVariant\">\n              {this.props.fontVariant || \"Regular\"}\n            </li>\n            <li className=\"FontsDetails__Item FontsDetails__Item--FontSize\">\n              {this.props.fontSize}px\n            </li>\n          </ul>\n          <textarea\n            style={textAreaStyle}\n            autoFocus={this.props.isActive}\n            // onFocus={this.handleClick}\n            placeholder=\"Write Something ...\"\n          ></textarea>\n        </div>\n        <div className=\"TextBox__CTA\">\n          <div className=\"TextBox__CTA-actions\">\n            <button type=\"button\" onClick={this.handleClickOnCompareBtn}>\n              <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n              Compare\n            </button>\n            {this.props.length > 1 ? (\n              <button type=\"button\" onClick={this.handleClickOnRemoveBtn}>\n                <i className=\"fa fa-minus\" aria-hidden=\"true\"></i>\n                Remove\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n          <button\n            className=\"HowToUse\"\n            type=\"button\"\n            onClick={this.handleClickOnHowToUse}\n          >\n            <i className=\"fa fa-code\" aria-hidden=\"true\"></i>\n            How to use\n          </button>\n        </div>\n        {this.state.isHowToUseTabVisible && (\n          <TabContainer fontName={this.props.fontFamily} />\n        )}\n      </div>\n    );\n  }\n}\n\nTextBox.propTypes = {\n  addTextBox: PropTypes.func,\n  removeTextBox: PropTypes.func,\n  changeTextBox: PropTypes.func,\n  color: PropTypes.object,\n  dataItem: PropTypes.number,\n  fontFamily: PropTypes.string,\n  fontSize: PropTypes.string,\n  fontVariant: PropTypes.string,\n  isActive: PropTypes.bool,\n  userSelectedTextBox: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n  return {\n    userSelectedTextBox: state.GFontsReducer.userSelectedTextBox,\n    textBoxOption: state.GFontsReducer.textBoxOption\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeTextBox: activeTextBox => {\n      dispatch(GFontsAction.changeTextBox(dispatch, activeTextBox));\n    },\n    addTextBox: activeTextBox => {\n      dispatch(GFontsAction.addTextBox(dispatch, activeTextBox));\n    },\n    removeTextBox: activeTextBox => {\n      dispatch(GFontsAction.removeTextBox(dispatch, activeTextBox));\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(enhanceWithClickOutside(TextBox));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TextBoxContainer.scss';\nimport TextBox from './../TextBox';\n\nconst TextBoxContainer = (props) => {\n    return (\n        <div className=\"TextBoxContainer\">\n            {props.textBoxes.map((item, index) => {\n                return (\n                    <div key={`index-${index}`}>\n                        <TextBox {...item}\n                            dataItem={index}\n                            length={props.textBoxes.length} />\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nTextBoxContainer.propTypes = {\n    textBoxes: PropTypes.array\n};\n\nexport default TextBoxContainer;\n","import React from 'react';\nimport './Loader.scss';\n\nconst Loader = () => {\n    return (\n        <div className=\"Loader\">\n            <div className=\"Loader__Overlay\"></div>\n            <div className=\"Loader__Wrapper\">\n                <div className=\"Loader__section\"></div>\n                <div className=\"Loader__section\"></div>\n                <div className=\"Loader__section\"></div>\n                <div className=\"Loader__section\"></div>\n            </div>\n        </div>\n    );\n}\n\nexport default Loader;\n","import React from 'react';\nimport './Header.scss';\n\nconst Header = (props) => {\n    return (\n        <div className=\"Header\">\n            <header className=\"App__header\">\n                <a href=\"/\" className=\"App__Logo\">\n                    <span className=\"App__Logo--First\">GFonts</span>\n                    <span className=\"App__Logo--Last\">Space</span>\n                </a>\n                <div className=\"App__SocialIcons\">\n                    <a className=\"App__SocialIcons__Link\"\n                        href=\"https://www.linkedin.com/in/pankajladhar/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        title=\"Pankaj Ladhar linkedin profile \">\n                        <i className=\"fa fa-linkedin\"></i>\n                    </a>\n                    <a className=\"App__SocialIcons__Link\"\n                        href=\"https://github.com/pankajladhar/GFontsSpace\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        title=\"Pankaj Ladhar github profile \">\n                        <i className=\"fa fa-github\"></i>\n                    </a>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GFontsAction from './../../Containers/Actions';\n\nimport FontOptionContainer from './../FontOptionContainer';\nimport TextBoxContainer from './../TextBoxContainer';\nimport Loader from './../Loader';\nimport Header from './../Header';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isHideControl: false,\n    }\n    this.handleClickOnControlBtn = this.handleClickOnControlBtn.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchData();\n  }\n\n  handleClickOnControlBtn() {\n    this.setState({ isHideControl: !this.state.isHideControl });\n  }\n\n  render() {\n    return (\n      <div className={this.state.isHideControl ? \"HideControl\" : \"ShowControl\"}>\n        {this.props.fonts.length === 0 ? <Loader /> :\n          <div className=\"App\">\n            <Header />\n            <section className=\"Wrapper\">\n              <FontOptionContainer />\n              <div className=\"TexBoxContainerWrapper\">\n                <TextBoxContainer textBoxes={this.props.textBoxOption} />\n              </div>\n              <button type=\"button\"\n                onClick={this.handleClickOnControlBtn}\n                className=\"App__Btn\">\n                {this.state.isHideControl ? \"Show Control\" : \"Hide Control\"}\n              </button>\n            </section>\n          </div>\n        }\n        </div>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    userSelectedTextBox: state.GFontsReducer.userSelectedTextBox,\n    textBoxOption: state.GFontsReducer.textBoxOption,\n    fonts: state.GFontsReducer.fonts,\n    availableCategories: state.GFontsReducer.availableCategories,\n    availableFontFamilies: state.GFontsReducer.availableFontFamilies\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData: () => {\n      dispatch(GFontsAction.fetchData(dispatch))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import _cloneDeep from 'lodash/cloneDeep';\n\nlet initialState = {\n    textBoxOption: [\n        {\n            isActive: true,\n            fontFamily: \"\",\n            fontVariant: \"\",\n            fontSize: \"40\",\n            lineHeight: \"40\",\n            value: \"\",\n            color: {\n                r: '0',\n                g: '0',\n                b: '0',\n                a: '1',\n            },\n\n            category: \"All\",\n            availableFontFamilies:[],\n            availableFontVariants: [],\n        }\n    ],\n    bgColor: {\n        r: '255',\n        g: '255',\n        b: '255',\n        a: '1',\n    },\n    showLoader: false,\n    userSelectedTextBox: 0,\n    availableCategories: [],\n    fonts: [],\n}\n\nexport default function GFontsReducer(state = initialState, action) {\n    let newState = _cloneDeep(state);\n    switch (action.type) {\n        case \"FETCHED_FONTS\":\n            newState.userSelectedTextBox = initialState.userSelectedTextBox\n            newState.textBoxOption = initialState.textBoxOption;\n            newState.fonts = action.payload.fonts;\n            newState.availableCategories = action.payload.availableCategories;\n            newState.textBoxOption[0].availableFontFamilies = action.payload.availableFontFamilies;\n            newState.textBoxOption[0].availableFontVariants = initialState.textBoxOption.availableFontVariants;\n            break;\n\n        case \"CATEGORY_CHANGED\":\n            newState.textBoxOption[action.payload.userSelectedTextBox].category = action.payload.selectedCategory\n            newState.textBoxOption[action.payload.userSelectedTextBox].availableFontFamilies = action.payload.availableFontFamilies;\n            break;\n\n        case \"FONTFAMLIY_CHANGED\":\n            newState.textBoxOption[action.payload.userSelectedTextBox].fontFamily = action.payload.fontFamily;\n            newState.textBoxOption[action.payload.userSelectedTextBox].availableFontVariants = action.payload.availableFontVariants\n            break;\n\n        case \"FONTVARIANT_CHANGED\":\n            newState.textBoxOption[action.payload.userSelectedTextBox].fontVariant = action.payload.fontVariant;\n            break;\n\n        case \"TEXTBOX_CHANGED\":\n            newState.userSelectedTextBox = action.payload.userSelectedTextBox;\n            newState.textBoxOption.forEach((element, index) => {\n                element.isActive = false\n            });\n            newState.textBoxOption[action.payload.userSelectedTextBox].isActive = true;\n            break;\n\n        case \"TEXTCOLOR_CHANGED\":\n            newState.textBoxOption[action.payload.userSelectedTextBox].color = action.payload.color;\n            break;\n\n        case \"BGCOLOR_CHANGED\":\n            newState.bgColor = action.payload.color;\n            break;\n\n        case \"FONTSIZE_CHANGED\":\n            newState.textBoxOption[action.payload.userSelectedTextBox].fontSize = action.payload.fontSize;\n            break;\n\n        case \"LINEHEIGHT_CHANGED\":\n            newState.textBoxOption[action.payload.userSelectedTextBox].lineHeight = action.payload.lineHeight;\n            break;\n\n        case \"NEWTEXTBOX_ADDED\":\n            newState.textBoxOption.push(initialState.textBoxOption[0])\n            newState.textBoxOption.forEach((element, index) => {\n                element.isActive = false\n            });\n            newState.userSelectedTextBox = action.payload.userSelectedTextBox + 1;\n            break;\n\n        case \"TEXTBOX_REMOVED\":\n            newState.textBoxOption.forEach((element, index) => {\n              element.isActive = false\n              if(index === action.payload.userSelectedTextBox) {\n                newState.textBoxOption.splice(index, 1)\n              }\n            });\n            newState.userSelectedTextBox = action.payload.userSelectedTextBox - 1;\n            break;\n        default:\n            break;\n    }\n    return newState\n}\n","import { combineReducers } from 'redux';\nimport GFontsReducer from './GFontsReducer';\n\nexport default combineReducers({\n    GFontsReducer\n})","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Components/App';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport Reducers from './Containers/Reducers';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n\nconst logger = createLogger();\n\nconst preloadedState = window.__PRELOADED_STATE__ || {\n    butiltWithReact: { welcomeMessage: 'Welcome to Built With React - Initial' }\n}\n\nconst store = compose(\n    applyMiddleware(thunk, logger),\n)(createStore)(Reducers, preloadedState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}